#!/usr/bin/python3

# This file is part of the Home2L project.
#
# (C) 2015-2021 Gundolf Kiefer
#
# Home2L is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Home2L is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Home2L. If not, see <https://www.gnu.org/licenses/>.

import sys
import os
import PyPDF2
import requests


def CheckFile (fileName, locPath):
  print ("Checking '{}'...".format (fileName))
  error = False

  f = open (fileName, "rb")
  pdf = PyPDF2.PdfFileReader (f)
  pages = pdf.getNumPages ()

  # Extract URIs...
  uriSet = {}
  for pageNo in range (pages):
    oPage = pdf.getPage (pageNo).getObject ()
    if "/Annots" in oPage:
      for anno in oPage ["/Annots"]:
        ank = anno.getObject () ["/A"]
        uri = None
        if "/URI" in ank:
          uri = ank["/URI"]
        elif "/F" in ank:
          uri = ank["/F"]
        elif ank["/S"] != "/GoTo":
          print ("  ERROR: Strange annotation on page {}: {}".format (pageNo + 1, str (ank)))
          error = True
        if uri:
          # ~ print ("{:>3}: {}".format (pageNo + 1, uri))
          if not uri in uriSet: uriSet[uri] = set()
          uriSet[uri].add (pageNo + 1)

  # Check the URIs...
  extUrls = None
  for uri, pageSet in uriSet.items ():
    # ~ print ("Checking '{}' on page(s) {} ...".format (uri, pageSet))
    if uri[0:4] == "www.": uri = "https://" + uri
    if "://" in uri:
      # Check external web reference ...
      if extUrls: extUrls = "{} '{}'".format (extUrls, uri)
      else:       extUrls = "'{}'".format (uri)
      ok = False
      try:
        req = requests.get (uri)
        if req.status_code == 200: ok = True
        elif req.status_code in [ 403 ]:
          print ("  WARNING: Failed to check remote URL '{}': {} {}". format (uri, req.status_code, req.reason))
          ok = True
      except requests.exceptions.SSLError:
        print ("  WARNING: SSL error with URL '{}' {}".format (uri, sorted (pageSet)))
        ok = True
      except: pass
      if not ok: print ("  ERROR: Non-existing remote URL '{}' {}: {} {}".format (uri, sorted (pageSet), req.status_code, req.reason))
    else:
      # Check local file ...
      uri = uri.rstrip(".")
        # Due to a bug in the LaTeX 'hyperref' package, it appears to be impossible to refer to files
        # or directories without a period in their name. As a workaround, affected link targets end
        # with a period (''.'') (see also: comment in 'home2l-book.tex').
        # These extra trailing periods are removed by this.
      if locPath:
        ok = os.path.exists (locPath + "/" + uri)
        if not ok: ok = os.path.exists (uri)
        if not ok: print ("  ERROR: Non-existing local file '{}' {}.".format (uri, sorted (pageSet)))
      else:
        ok = True
        print ("  INFO: Relative link to '{}' {}.".format (uri, sorted (pageSet)))
    if not ok: error = True

  # Done ...
  print ("  To open all external URLs in a web browser, run:\n  $ firefox " + extUrls)
  return not error


# Main ...
if len (sys.argv) < 2:
  print ("Usage: {} <PDF file> [<path for local relative references>]".format (sys.argv[0]))
else:
  if not CheckFile (sys.argv[1], None if len (sys.argv) <= 2 else sys.argv[2]): exit (1)
