#!/usr/bin/python3

# This file is part of the Home2L project.
#
# (C) 2015-2020 Gundolf Kiefer
#
# Home2L is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Home2L is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Home2L. If not, see <https://www.gnu.org/licenses/>.


# This is an example rules script for the tutorial.





################################################################################
#                                                                              #
#                         Initialization                                       #
#                                                                              #
################################################################################


# Import the Home2L library ...
from home2l import *


# Init Home2L, passing custom instance name ...
Home2lInit (instance = "rules")


# Get common resources ...
rcUse = RcGet ("/alias/use")
rcDaylight = RcGet ("/alias/daylight")
rcWeatherWarning = RcGet ("/alias/weatherWarning")





################################################################################
#                                                                              #
#                             Front Light                                      #
#                                                                              #
################################################################################

# At night, the front light is switched on automatically for 5 seconds when the
# motion sensor is triggered. At day time, the light is off permanently.
# BTW: These rules can be overridden and the light manually be switched on and
# off in the WallClock UI. Try it!


rcMotion = RcGet ("/alias/motion")
rcLight  = RcGet ("/alias/frontLight")
rcLight.SetDefault (False)


@onUpdate (rcMotion)
def LightOnIfMotion ():
  # If the motion sensor shows activity, turn on the light for 5 seconds.
  if rcMotion.Value () == True:
    rcLight.SetRequest ("1 #motion -5000")


@onUpdate (rcDaylight)
def LightOffDuringDay ():
  # (Only) At day time, switch off the light. This gets a higher priority
  # than #motion requests to have the light off.
  if rcDaylight.Value () == True:
    rcLight.SetRequest ("0 #daytime *4")
  else:
    rcLight.DelRequest ("#daytime")





################################################################################
#                                                                              #
#                           Windows and Shades                                 #
#                                                                              #
################################################################################

# This section contains two example rules to control windows and shades.



# Internal resource to represent the maximum outside temperature over the day.
#   Change this to a value of 25 degrees or higher to try the 'RoofWindowCooling' rule.
rcTempDayMaxOutside = NewSignal ("tempDayMaxOutside", rctTemp, 20.0)

rcRoofWindow = RcGet ("/alias/floorplan/living-roofwin/actuator")
rcRoofShades = RcGet ("/alias/floorplan/living-roofwin/shades")



########### Closing Shades at Night ##########

# The following rule automatically closes window shades over night.
# The set of shades actually controlled by this rule is defined by the below "for" loop.

@onUpdate (rcDaylight)
def ShadesAtNight ():
  # Determine whether shades should be up (0) or down (100) ...
  if rcDaylight.ValidValue (True):
    value = 0     # day time or daylight status unknown: leave shades open
  else:
    value = 100   # night time: close the shades
  # Set requests for all relevant windows ...
  #   The resources URIs can be looked up in the floorplan / resources.conf.
  for room in ( "dining", "kitchen", "bedroom", "bath" ):
    RcGet ("/alias/floorplan/" + room + "-shades/shades").SetRequest (value);



########## Roof window cooling ##########

# On hot days, the house can be cooled by opening the roof window over night
# to let fresh, cool air get in. At day time, the window is closed as well as
# the shades to keep warm air and sun rays outside.

@onUpdate (rcTempDayMaxOutside, rcDaylight)
def RoofWindowCooling ():
  if rcTempDayMaxOutside.ValidValue (0.0) < 25.0:   # outside temperature < 25 degrees?
    valWindow = 0       # default (not a hot day): do not open the window, ...
    valShades = 0       # ... and do not close the shades
  else:
    if rcDaylight.ValidValue (False):
      valWindow = 0     # day time: close window ...
      valShades = 100   # ... and close shades as a heat protection
    else:
      valWindow = 100   # night time: open window ...
      valShades = 0     # ... and open shades to let warm air leave the building
  rcRoofWindow.SetRequest (valWindow)
  rcRoofShades.SetRequest (valShades)



########## Safety Closing of Roof Window ##########

# During rainy weather, it is important to keep the roof window closed to
# prevent the water from getting into the house.
#
# This rule is an example on how to write rules with increased reliability
# exploiting the distributed design of the Home2L suite.
#
# The rules maintain a "watchdog" request "#safety_wd", which is timed to become
# active in a few seconds or minutes in the future. In normal operation, this
# request will be updated and the start time be moved on regularly.
# However, if the rules script crashes, the watchdog request remains and
# will make the window close at the given time. Since requests are always
# stored by their respective resource drivers, only the Home2L instance running
# the driver is required for performing the safety closing, no other instance
# is needed. Hence, by assigning the driver to a dedicated Home2L instance,
# the likelyhood of a failure can be reduced.
#
# DISCLAIMER: This technique typically reduces the likelihood of a failure,
#   but it certainly cannot guarantee that no failures happen.
#
# If the (boolean) weather warning resource indicates rain ('True'), the window
# is actively closed or opened again using a separat request ID ("#safety") to
# not interfere with the watchdog mechanism. If the weather warning resource
# is known (e.g. due to a failure of that sensor), the watchdog request is not
# updated, so that the window closes after some time.
#
# The priority of safety requests is 8, which is above that of any rules or
# user interaction, but still can be superceeded by manual requests with
# priority 9.
#
# The time values set here are shorter than they would be in realistic cases
# for demonstration purposes.


# Helper to refresh the watchdog request ...
def RefreshWatchdogRequest ():
  rcRoofWindow.SetRequest ("0 #safety_wd *8 +5s")


# Timed rule to refresh the watchdog request, but only if the weather warning
# resource is a known Boolean value ...
@at ( 0, TicksOf ("1s") )
def RoofWindowSafetyOnTime ():
  if rcWeatherWarning.Value () != None: RefreshWatchdogRequest ()


# Rule to explicitely close the window on a weather warning ...
@onUpdate ( rcWeatherWarning )
def RoofWindowSafetyUpdate ():
  # If the resource value is unknown (warn == None), nothing happens here. In this
  # case, we rely on the watchdog request which will become active after some time.
  warn = rcWeatherWarning.Value ()
  if warn == True:
    # Bad weather (known): Close window immediately ...
    rcRoofWindow.SetRequest ("0 #safety *8")
  elif warn == False:
    # Nice weather (known): Remove an existing safety request ...
    rcRoofWindow.DelRequest ("#safety", TicksAbsOf ("3s"))
      # To avoid mechanical stress due to frequent opening/closing, the request
      # deletion is tagged with a delay (3 seconds in this example, typically in
      # the order of minutes or an hour in a real installation).
      # If no "#safety" request exists so far, the previous line has no effect.
    # Refresh the watchdog (the resource may have just become valid again) ...
    RefreshWatchdogRequest ()





################################################################################
#                                                                              #
#                           WallClock Display                                  #
#                                                                              #
################################################################################

# The display state (on/off, active/standby) can be controlled by means of
# resources. This is demonstrated by the following rule.


rcWallClockActive  = RcGet ("/host/wallclock/ui/active")
rcWallClockStandby = RcGet ("/host/wallclock/ui/standby")


@daily ("wallclock")
def WallClockDisplay ():
  # Keep the WallClock display always on in active mode.
  # This is useful for the first steps of the tutorial - later this line may be
  # removed.
  rcWallClockActive.SetRequest (True)
  # Switch and keep on the WallClock display at day time (from 7:00 until 23:00).
  rcWallClockStandby.SetRequest (True, "+7:00 -23:00")





################################################################################
#                                                                              #
#                                Use State                                     #
#                                                                              #
################################################################################

# This rule sets the default use state according to the day/night time.


@onUpdate (rcDaylight)
def SetDefaultUseState ():
  rcUse.SetRequest ((rcvUseNight, rcvUseDay) [rcDaylight.ValidValue (False)], priority = 1)





################################################################################
#                                                                              #
#                      Finally: Run Main Event Loop                            #
#                                                                              #
################################################################################


Home2lRun ()
