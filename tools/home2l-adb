#!/bin/bash

# This file is part of the Home2L project.
#
# (C) 2015-2020 Gundolf Kiefer
#
# Home2L is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Home2L is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Home2L. If not, see <https://www.gnu.org/licenses/>.


# ADB appears to have problems when started by different users/groups. For this
# reason, it is always started by user 'home2l' by sudo. To let this work
# properly, for an adminstration user, the following line should be added
# to /etc/sudoers:
#
#  <admin user> ALL=(home2l) NOPASSWD:/usr/bin/adb
#



# Usage ...
usage_and_exit () {
  echo "Usage: ${0##*/} <hostname> <adb command with args>"
  echo
  echo "Besides the usual adb commands, the following extended commands are supported:"
  echo "  x-start       : Start Home2L app"
  echo "  x-stop        : Stop Home2L app"
  echo "  x-restart     : Restart Home2L app"
  echo
  echo "  x-install-apk : (Re-)Install Home2L app"
  echo "  x-install-etc : Update 'etc' for the Home2L app"
  echo
  echo "  x-ssh <host>  : Check SSH settings by starting a session on <host>"
  echo "  x-connect     : (Re-)Connect Android host"
  echo "  x-logcat      : Show Android logs for debugging"
  exit 3
}

if [[ "$1" == "" ]]; then
  usage_and_exit
fi

#~ uname -a
#~ echo $@



# Determine coordinates of target device ...
HOSTNAME=`hostname`
DEV_NAME="$1"         # Given name (can be anything of hostname, device ID or port)

REC=( `grep "^[^#]" $HOME2L_ROOT/etc/androidb.conf | grep $DEV_NAME` )
DEV_NAME=${REC[0]}    # (Host)name of the Android device
DEV_HOST=${REC[1]}    # (Host)name of the hosting machine, to which the Android device is connected
DEV_ID=${REC[2]}      # ADB device ID
DEV_PORT=${REC[3]}    # Forwarding port



# Re-run the script on the correct hosting machine...
if [[ "$HOSTNAME" != "$DEV_HOST" ]]; then
  #~ echo HOSTNAME=-$HOSTNAME- DEV_HOST=-$DEV_HOST-
  exec ssh -o LogLevel=QUIET -t home2l@$DEV_HOST home2l ${0##*-} $@
fi



# Invoke ADB with the desired device...
run_adb () {
  # Notes:
  # - sg adb -c "adb -s $DEV_ID $CMD"  # does not work
  # - The output of 'adb' should not be filtered (such as appending "sed 's#^#  [adb] #'"),
  #   because otherwise, interaction is not possible and the TTY output gets scrambled.

  #~ echo "### Running as '"`whoami`"': " adb -s $DEV_ID $@
  if [[ "`whoami`" == "home2l" ]]; then
    adb -s $DEV_ID $@
  else
    sudo -u home2l adb -s $DEV_ID $@
  fi
}



# Execute actual command...
shift
CMD_START="am start org.home2l.app/.Home2lActivity"
CMD_STOP="am force-stop org.home2l.app"
case "$1" in
  x-stop)
    echo "home2l-adb: Stopping Home2l app on $DEV_NAME ..."
    run_adb "shell $CMD_STOP"
    ;;
  x-start)
    echo "home2l-adb: Starting Home2l app on $DEV_NAME ..."
    run_adb "shell $CMD_START"
    ;;
  x-restart)
    echo "home2l-adb: Restarting Home2l app on $DEV_NAME ..."
    run_adb "shell ($CMD_STOP; $CMD_START)"
    ;;

  x-install-apk)
    echo "home2l-adb: Installing the Home2l app on $DEV_NAME ..."
    run_adb "install -r $HOME2L_ROOT/install/Home2lApp.apk"
    ;;
  x-install-etc)
    echo "home2l-adb: Updating the Home2l app configuration ('etc') on $DEV_NAME ..."
    # This procedure requires root permissions for adb (uses su).
    # Determine root and UID of the APK owner...
    APK_ROOT=/data/data/org.home2l.app/files
    APK_STAT_VERSION=(`run_adb "shell stat -t $APK_ROOT/home2l/VERSION" | grep -v '^#'`)
    APK_UID=${APK_STAT_VERSION[4]}
      #~ echo "# APK_STAT_VERSION=${APK_STAT_VERSION[*]}"
      #~ echo "# HOME2L_ROOT=$APK_ROOT HOME2L_UID=$APK_UID"
    # Create an empty and writable temporary directory ...
    #   Files pushed in there will be owned by 'shell' and must be removed from here
    run_adb "root"
    run_adb "shell rm -fr $APK_ROOT/.update"
    run_adb "shell su $APK_UID mkdir -p $APK_ROOT/.update"
    run_adb "shell su $APK_UID chmod 777 $APK_ROOT/.update"
    # Push (upload) the 'etc' tree ...
    run_adb "push `realpath /opt/home2l/etc` $APK_ROOT/.update/etc"
    # Copy the upload into place (this will set the owner properly) ...
    run_adb "shell su $APK_UID rm -fr $APK_ROOT/home2l/etc"
    run_adb "shell su $APK_UID cp -r $APK_ROOT/.update/etc $APK_ROOT/home2l/"  2>&1 | grep -v etc/gpio
    run_adb "shell su $APK_UID chmod -R 700 $APK_ROOT/home2l/etc" 2>&1 | grep -v "No such file or directory"
    # Cleanup ...
    run_adb "shell rm -fr $APK_ROOT/.update"
    run_adb "unroot" || true
    ;;

  x-ssh)
    if [[ "$2" == "" ]]; then
      usage_and_exit
    fi
    echo "Checking the SSH configuration on $DEV_NAME ..."
    echo
    echo "To allow automatic logins to '$2', add the following line to '~home2l/.ssh/authorized_keys' on '$2':"
    echo
    run_adb "shell su root cat /data/data/org.home2l.app/files/home2l/etc/secrets/ssh/$DEV_NAME.pub"
    echo
    echo "Running an SSH session from $DEV_NAME to 'home2l@$2' (enter 'exit' to quit) ..."
    echo
    run_adb "shell su -c \"ssh -t -i /data/data/org.home2l.app/files/home2l/etc/secrets/ssh/$DEV_NAME -o UserKnownHostsFile=/data/data/org.home2l.app/files/home2l/etc/secrets/ssh/known_hosts -o NoHostAuthenticationForLocalhost=yes home2l@$2\""
    echo
    echo "This is the resulting 'known_hosts' file, consider updating your global one accordingly:"
    echo
    run_adb "shell su root cat /data/data/org.home2l.app/files/home2l/etc/secrets/ssh/known_hosts"
    echo
    ;;

  x-logcat)
    run_adb "logcat -v time home2l:D SDL:V *:E *:W"
    ;;

  x-connect)
    run_adb "forward tcp:$DEV_PORT tcp:1194"
    echo "home2l-adb: Connecting $DEV_NAME ..."
    ;;

  *)
    run_adb "$@"    # default: pass command from command line
    ;;
esac



